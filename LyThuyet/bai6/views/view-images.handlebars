<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tải lên hình ảnh</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">

</head>
<body>
    <div class="container-fluid">
      <div class="row">
        <div class="col-6">  <h1>Tải lên hình ảnh</h1>
            <form id="upload-form" enctype="multipart/form-data">
                <input type="file" name="images" multiple>
                <button type="submit">Tải lên</button>
            </form>

            <div id="upload-status" >
            </div></div>
            <div class="col-6">
             <h1>   Ảnh đã tải xong</h1>
             <div class="row" id="image-list">

             </div>
            </div>
      </div>
    
    </div>
   
    <script >
const result = document.getElementById('result');

const status = document.getElementById('upload-status');
const imageList = document.getElementById('image-list');

document.addEventListener('DOMContentLoaded', function() {
    loadImages();
    
});
const id = window.location.href.split('/');

function loadImages() {

    fetch(`/getImages/${id[id.length-1]}`)
        .then(response => response.json())
        .then(data => {
            
            while (imageList.firstChild) {
                imageList.removeChild(imageList.firstChild);
            }

            data.images.forEach(image => {
                const imageElement = document.createElement('div');
                imageElement.className = 'col-md-3';

                const img = document.createElement('img');
                img.src = `/images/${image}`;
                img.className = 'img-fluid';
                img.alt = image;

                imageElement.appendChild(img);
                imageList.appendChild(imageElement);
            });
        })
        .catch(error => {
            console.log(error);
        });
}

    const form = document.getElementById('upload-form');
 form.addEventListener('submit', async function(event) {
  event.preventDefault();
  const formData = new FormData(form);
  const images = formData.getAll('images');
  console.log(images);

  const uploadPromises = images.map((image, index) => {
    const container = document.createElement('div');
    container.classList.add('progress-container');
    const progress = document.createElement('progress');
    progress.id = `progress-bar-${index}`;
    progress.value = 0;
    progress.max = 100;
    container.appendChild(progress);
    status.appendChild(container);

    return upLoadImage(image, progress);
  });

  await Promise.all(uploadPromises);
imageList.innerHTML = ''
  loadImages();
});

        

function updateProgressBar(progressValue, progressElement) {
    progressElement.value = progressValue;
}

function upLoadImage(image,progressElement ) {
    const formData = new FormData();
    formData.append('images', image);
    fetch(`/upload-images/${id[id.length-1]}`, {
        method: 'POST',
        body: formData,
    })
    .then(function(response) {
        if (!response.ok) {
            throw new Error('Lỗi tải lên: ' + response.status);
        }
      
        const contentLength = parseInt(response.headers.get('content-length'), 10);
        let loadedBytes = 0;

        const reader = response.body.getReader();

        function read() {
            reader.read().then(({ done, value }) => {
                if (done) {
                  
                } else {
                    loadedBytes += value.length;
                    const progress = (loadedBytes / contentLength) * 100;
                    updateProgressBar(progress, progressElement);
                    read(); 
                }
            });
        }

        read(); 
    }) .then(function(data) {
        
        progressElement.style.backgroundColor = 'green'; 
        showStatusMessage(progressElement, 'Success ' +image.name);
    })
    .catch(function(error) {

        progressElement.value = 0;
        progressElement.style.backgroundColor = 'red'; 
        showStatusMessage(progressElement,'Failed ' +image.name+ error.message); 
    });
    loadImages();

}
function showStatusMessage(progressElement, message) {
    const statusMessage = document.createElement('span');
    statusMessage.textContent = message;
    progressElement.parentNode.appendChild(statusMessage); 
}

</script> 
 

</body>
</html>
